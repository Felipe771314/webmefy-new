{%- liquid
  assign show_tabs = false
  assign product_description_in_tab = false
  assign tab_sep = '#tab#'

  for block in section.blocks
    if block.type contains 'tab_'
      assign tab_type = block.type | replace: 'tab_', ''

      if block.settings.heading_color != blank and block.settings.heading_color != 'rgba(0,0,0,0)'
        assign tab_title_color = block.settings.heading_color.red | append: ',' | append: block.settings.heading_color.green | append: ',' | append: block.settings.heading_color.blue
      else
        assign tab_title_color = 'null'
      endif

      if block.settings.text_color != blank and block.settings.text_color != 'rgba(0,0,0,0)'
        assign tab_text_color = block.settings.text_color.red | append: ',' | append: block.settings.text_color.green | append: ',' | append: block.settings.text_color.blue
      else
        assign tab_text_color = 'null'
      endif

      case tab_type
        when 'metafield'
          assign title_metafield = block.settings.title | split: '.'
          assign tab_title = product.metafields[title_metafield[0]][title_metafield[1]] | escape | default: block.settings.title_default
          assign content_metafield = block.settings.content | split: '.'
          assign tab_content = product.metafields[content_metafield[0]][content_metafield[1]]
        when 'content'
          if block.settings.page != blank
            assign tab_title = block.settings.title | default: block.settings.page.title
            assign tab_content = block.settings.page.content
          else
            assign tab_title = block.settings.title
            assign tab_content = block.settings.content
            assign tab_content = tab_content | replace: '&lt;', '<' | replace: '&60;', '<' | replace: '&gt;', '>' | replace: '&62;', '>'
          endif
        when 'desc'
          assign tab_title = block.settings.title
          capture product_description
            render 'product-description', product: product, settings: block.settings
          endcapture
          assign tab_content = product_description
          assign product_description_in_static_tab = true
        when 'liquid'
          assign tab_title = block.settings.title
          assign tab_content = block.settings.liquid
        when 'reviews'
          assign tab_title = block.settings.title
          assign tab_content = product.metafields.spr.reviews
        when 'metaobject'
          assign tab_title = block.settings.title
          assign content_metafield = block.settings.content | split: '.'
          capture tab_content
            render 'metaobject-tab-content', items: product.metafields[content_metafield[0]][content_metafield[1]].value, block_settings: block.settings, block_id: block.id
          endcapture
        when 'advanced_icon_list'
          assign tab_title = block.settings.title
          capture tab_content
            render 'advanced-icon-list', block_settings: block.settings, block_id: block.id
          endcapture
      endcase

      if tab_content != blank
        assign show_tabs = true
        assign tab_titles = tab_titles | append: tab_title | append: tab_sep
        assign tab_contents = tab_contents | append: tab_content | append: tab_sep
        assign tab_title_colors = tab_title_colors | append: tab_title_color | append: tab_sep
        assign tab_text_colors = tab_text_colors | append: tab_text_color | append: tab_sep
        assign tab_types = tab_types | append: tab_type | append: tab_sep
      endif
    endif
  endfor

  assign tab_titles = tab_titles | split: tab_sep
  assign tab_contents = tab_contents | split: tab_sep
  assign tab_title_colors = tab_title_colors | split: tab_sep
  assign tab_text_colors = tab_text_colors | split: tab_sep
  assign tab_types = tab_types | split: tab_sep
-%}
<style>
  {% for tab_title in tab_titles %}
  {% if tab_title_colors[forloop.index0] != 'null' %}
  	#tab-{{ section.id }}-{{ forloop.index }} .product-tabs__tab-item-heading--colored,
  	.tab-{{ section.id }}-{{ forloop.index }}.tabs-nav__item--heading-colored{
  			--heading-color: {{ tab_title_colors[forloop.index0] }};
  	}
  {% endif %}
  {% if tab_text_colors[forloop.index0] != 'null' %}
  	#tab-{{ section.id }}-{{ forloop.index }} .product-tabs__tab-item-content--colored {
  			--text-color: {{ tab_text_colors[forloop.index0] }};
  	}
  {% endif %}
  {% endfor %}
</style>
{% if show_tabs %}
  <div class="product-tabs product-tabs--{{ section.settings.tabs_position }} product-tabs--{{ section.settings.tabs_type }}{% unless section.settings.tabs_container_size == 'full-width' or section.settings.tabs_position == 'right' %} container container--{{ section.settings.tabs_container_size }}{% endunless %}">
    {% if tab_titles.size > 1 and section.settings.tabs_type == 'tabs' %}
      <tabs-nav arrows class="tabs-nav tabs-nav--loose hidden-pocket">
        <scrollable-content class="tabs-nav__scroller hide-scrollbar">
          <div class="tabs-nav__scroller-inner">
            <div class="tabs-nav__item-list">
              {% for tab_title in tab_titles %}
                <button
                  type="button"
                  class="tab-{{ section.id }}-{{ forloop.index }} tabs-nav__item heading heading--small {% if tab_title_colors[forloop.index0] != "null" and tab_title_colors[forloop.index0] != 'rgba(0,0,0,0)' %}tabs-nav__item--heading-colored{% endif %}"
                  aria-expanded="{% if forloop.first %}true{% else %}false{% endif %}"
                  aria-controls="tab-{{ section.id }}-{{ forloop.index }}"
                >
                  {{ tab_title }}
                </button>
              {% endfor %}
            </div>
          </div>
        </scrollable-content>

        <div class="tabs-nav__arrows">
          <button class="tabs-nav__arrow-item">
            <span class="visually-hidden">{{ 'general.accessibility.previous' | t }}</span>
            {%- render 'icon' with 'product-tab-left', direction_aware: true -%}
          </button>

          <button class="tabs-nav__arrow-item">
            <span class="visually-hidden">{{ 'general.accessibility.next' | t }}</span>
            {%- render 'icon' with 'product-tab-right', direction_aware: true -%}
          </button>
        </div>
      </tabs-nav>
    {% endif %}

    {%- capture tab_icon -%}
      {% if section.settings.tabs_icon == 'plus' %}
        <span class="animated-plus"></span>
      {% else %}
        {%- render 'icon' with 'chevron' -%}
      {% endif %}
    {%- endcapture -%}

    <div class="product-tabs__content">
      {% for tab_content in tab_contents %}
        {%- capture tab_content_html -%}
          <div
            {% unless forloop.first %}
              hidden
            {% endunless %}
            id="tab-{{ section.id }}-{{ forloop.index }}"
            class="product-tabs__tab-item-wrapper"
          >
            {% capture open_tab %}
              {% if section.settings.tabs_behaviour == 'first_open' and forloop.first %}
                true
              {% elsif section.settings.tabs_behaviour == 'all_open' %}
                true
              {% endif %}
            {% endcapture %}
            <button
              is="toggle-button"
              {% if tab_types[forloop.index0] == 'reviews' %}
                id="product-{{ product.id }}-reviews-pocket"
              {% endif %}
              class="collapsible-toggle heading heading--small {% if tab_title_colors[forloop.index0] != 'null' and tab_title_colors[forloop.index0] != 'rgba(0,0,0,0)' %}product-tabs__tab-item-heading--colored{% endif %}{% if section.settings.tabs_type == 'tabs' %} hidden-lap-and-up{% endif %}"
              aria-controls="tab-{{ section.id }}-{{ forloop.index }}-content"
              aria-expanded="{% if open_tab != blank %}true{% else %}false{% endif %}"
            >
              {{ tab_titles[forloop.index0] }}
              {{- tab_icon -}}
            </button>

            <collapsible-content
              {% if open_tab != blank  %}
                open
              {% endif %}
              id="tab-{{ section.id }}-{{ forloop.index }}-content"
              class="collapsible"
            >
              <div class="product-tabs__tab-item-content {% if tab_text_colors[forloop.index0] != 'null' and tab_text_colors[forloop.index0] != 'rgba(0,0,0,0)' %}product-tabs__tab-item-content--colored{% endif %}{% unless tab_types[forloop.index0] == 'reviews' %} rte{% endunless %}">
                {% if tab_types[forloop.index0] == 'reviews' %}
                  <div id="shopify-product-reviews" class="spr-reviews" data-id="{{ product.id }}">
                    {{- tab_content -}}
                  </div>
                {% else %}
                  {{- tab_content -}}
                {% endif %}
              </div>
            </collapsible-content>
          </div>
        {%- endcapture -%}

        {% if forloop.first %}
          {% assign first_tab_content = tab_content_html %}
        {% else %}
          {% assign other_tab_content = other_tab_content | append: tab_content_html %}
        {% endif %}
      {% endfor %}

      {{ first_tab_content }}

      {% if other_tab_content != blank and section.settings.tabs_type == 'grid' %}
        <div class="product-tabs__content-aside">
          {{ other_tab_content }}
        </div>
      {% elsif other_tab_content != blank %}
        {{ other_tab_content }}
      {% endif %}
    </div>
  </div>
{% endif %}
