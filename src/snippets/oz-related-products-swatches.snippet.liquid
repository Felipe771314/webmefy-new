{%- assign hide_unique_swatch = settings.oz_swatches_hide_unique | default: false -%}
{% assign swatches_titles = settings.oz_swatches_titles | split: ',' %}
{% assign swatches_product_detail = settings.oz_swatches_product_detail | split: ',' %}
{% assign swatches_product_item = settings.oz_swatches_product_item | split: ',' %}
{% assign show_tooltip = settings.oz_swatches_show_tooltip %}
{% assign show_current_color = settings.oz_swatches_show_current_colour %}
{%- assign color_swatch_config = settings.color_swatch_config | newline_to_br | split: '<br />' -%}
{% assign list_limit = settings.oz_swatches_product_item_limit %}
{% liquid
  assign market_availability_placeholder = false
  assign market_availability_list = settings.oz_swatches_market_availability_list
  assign enable_market_availability = settings.oz_swatches_enable_market_availability
  if enable_market_availability and localization.market.handle
    assign currentMarket = localization.market.handle | downcase
    assign market_availability_list_array = market_availability_list | downcase | strip | split: ','
    unless market_availability_list_array.size == 0 or market_availability_list_array contains currentMarket
      assign enable_market_availability = false
    endunless
  else
    assign enable_market_availability = false
  endif
  if enable_market_availability and settings.oz_swatches_market_availability_placeholder
    assign market_availability_placeholder = true
  endif
%}
{% if list_limit != blank %}
  {% assign list_limit = list_limit | times: 1 %}
{% endif %}

{% if settings.oz_swatches_use_options == true and settings.oz_swatches_use_options_names != blank %}
  {% assign use_options = settings.oz_swatches_use_options_names | downcase | split: ',' %}
{% endif %}

{% for i in (1..settings.oz_swatches_count) %}
  {%- liquid
    assign product_options_names = null
    assign swatch_index = i | minus: 1
    assign swatch_string_index = i | append: ''
    assign swatch_title = swatches_titles[swatch_index]
    if settings.oz_swatches_first_index == false and i == 1
      assign swatch_namespace = settings.oz_swatches_namespace
    else
      assign swatch_namespace = settings.oz_swatches_namespace | append: i
    endif

    assign use_options_name = use_options[swatch_index] | strip
    assign product_option_match = null
    for product_option in current_product.options_with_values
      assign product_option_name_downcase = product_option.name | downcase | strip
      assign product_options_names = product_options_names | append: product_option_name_downcase
      unless forloop.last
        assign product_options_names = product_options_names | append: ','
      endunless
      if use_options_name == product_option_name_downcase and product_option.values.size == 1
        assign product_option_match = product_option
        break
      endif
    endfor

    assign current_product_text = current_product.metafields[swatch_namespace].text
    if product_option_match
      assign swatch_title = product_option_match.name
      if shop.locale == 'fr'
        assign swatch_title = swatch_title | append: ' '
      endif
      assign swatch_title = swatch_title | append: ':'
      assign current_product_label = product_option_match.values[0].name
      assign current_product_label_downcase = current_product_label | downcase
      if product_option_match.values[0].swatch
        assign current_product_color = product_option_match.values[0].swatch.color
        assign current_product_image = product_option_match.values[0].swatch.image
      else
        assign fallback_to_color_metaobjects = true
        for color_swatch_item in color_swatch_config
          assign color_swatch_parts = color_swatch_item | split: ':'
          assign color_swatch_name = color_swatch_parts.first | downcase | strip

          if current_product_label_downcase == color_swatch_name
            assign color_swatch_value = color_swatch_parts.last | strip

            if color_swatch_value contains '#'
              assign current_product_color = color_swatch_value
            elsif images[color_swatch_value] != blank
              assign current_product_image = images[color_swatch_value]
            endif
            assign fallback_to_color_metaobjects = false

            break
          endif
        endfor
        comment
          If we find nothing then fallback to color metaobjects (either native or custom)
        endcomment
        if fallback_to_color_metaobjects
          assign color_metaobject_type = settings.color_metaobject_type | strip | default: 'shopify--color-pattern'
          assign metaobject_color_values = shop.metaobjects[color_metaobject_type].values
          paginate metaobject_color_values by 250
            for color_obj in metaobject_color_values
              assign color_name_downcase = color_obj.label | downcase

              if current_product_label_downcase == color_name_downcase
                assign current_product_label = color_obj.label
                assign current_product_image = color_obj.image
                assign current_product_base64_image = color_obj.base64_image
                assign current_product_color = color_obj.color

                break
              endif
            endfor
          endpaginate
        endif
      endif
      if current_product_color == blank and current_product_image == blank
        assign current_product_text = current_product_label
      endif
    elsif current_product.metafields[swatch_namespace].metaobject.value
      assign current_product_label = current_product.metafields[swatch_namespace].metaobject.value.label
      assign current_product_color = current_product.metafields[swatch_namespace].metaobject.value.color
      assign current_product_image = current_product.metafields[swatch_namespace].metaobject.value.image
      assign current_product_base64_image = current_product.metafields[swatch_namespace].metaobject.value.base64_image
    else
      assign current_product_label = current_product.metafields[swatch_namespace].label
      assign current_product_color = current_product.metafields[swatch_namespace].color
      assign current_product_image = current_product.metafields[swatch_namespace].image
      assign current_product_base64_image = current_product.metafields[swatch_namespace].base64_image
    endif
    assign current_product_products = current_product.metafields[swatch_namespace].products.value
    if current_product_products == blank
      assign show_swatch = false
    elsif current_product_text or current_product_color or current_product_image or current_product_base64_image
      if location == 'list' and swatches_product_item contains swatch_string_index
        assign show_swatch = true
      elsif location != 'list' and swatches_product_detail contains swatch_string_index
        assign show_swatch = true
      else
        assign show_swatch = false
      endif
    else
      assign show_swatch = false
    endif

    if hide_unique_swatch and current_product_products.count <= 1
      assign show_swatch = false
    endif

    if show_swatch and settings.oz_swatches_product_detail_hide_outofstock and location != 'list'
      assign show_swatch = false
      for related_product in current_product_products
        if related_product.available
          assign show_swatch = true
          break
        endif
      endfor
    endif

    if show_swatch and settings.oz_swatches_product_item_hide_outofstock and location == 'list'
      assign show_swatch = false
      for related_product in current_product_products
        if related_product.available
          assign show_swatch = true
          break
        endif
      endfor
    endif
  -%}

  {%- capture swatch_id -%}{% if swatch_id_prefix != blank %}{{ swatch_id_prefix }}-{% endif %}{{ swatch_namespace }}-{{ section.id }}-{{ template.suffix }}-{{ product.id }}{%- endcapture -%}

  {%- comment -%}
    The display of a swatch depends on its type

    Currently, two possible types
      text
      label/color/image/base64
  {%- endcomment -%}

  {%- capture html_attributes -%}
    {% if html_attributes != blank %}
      {% assign html_attributes_arr = html_attributes | split: '[]' %}
      {% for attr in html_attributes_arr %}
        {{ attr }}
      {% endfor %}
    {% endif %}
    {% if hide_unique_swatch %}
      hide-unique
    {% endif %}
    {% if enable_market_availability %}
      enable-market-availability
    {% endif %}
    {% if market_availability_placeholder %}
      market-availability-placeholder
    {% endif %}
    {% if list_limit != blank and location == 'list' %}
      display-list-limit={{ list_limit }}
    {% endif %}
  {%- endcapture -%}

  {%- capture swatches_placeholder -%}
    {% if market_availability_placeholder %}
      {% liquid
        case location
          when 'list'
            assign placeholder_width = 60
            assign placeholder_height = 14
          when 'quick-buy-drawer'
            assign placeholder_width = 100
            assign placeholder_height = 40
          when 'quick-buy-popover'
            assign placeholder_width = 100
            assign placeholder_height = 40
          else
            assign placeholder_width = 120
            assign placeholder_height = 60
        endcase
      %}
      <place-holder
        class="oz-swatches__placeholder{% if location != blank %} oz-swatches__placeholder--{{ location }}{% endif %}"
        width="{{ placeholder_width }}"
        height="{{ placeholder_height }}"
      ></place-holder>
    {% endif %}
  {%- endcapture -%}
  {% assign swatches_placeholder = swatches_placeholder | strip | strip_newlines %}

  {%- comment -%}
    Display of a text swatch
  {%- endcomment -%}
  {% if show_swatch and selector_type == 'dropdown' %}
    <oz-app-swatches
      {% if keep_opt_vals_btwn_swatches and product_options_names %}
        data-options-names="{{ product_options_names }}"
      {% endif %}
      data-location="{{ location }}"
      data-section-id="{{ section.id }}"
      class="product-form__variants product-form__variants--oz-swatches{% if extra_class != blank %} {{ extra_class }}{% endif %}"
      {{ html_attributes }}
    >
      {% if swatches_placeholder != blank %}
        {{ swatches_placeholder }}
      {% endif %}
      {% unless show_label_inside_dropdown or hide_label_dropdown %}
        <span class="product-form__option-name{% if swatches_placeholder != blank %} hidden{% endif %}">
          {{- swatch_title -}}
        </span>
      {% endunless %}
      <div class="select-wrapper{% if swatches_placeholder != blank %} hidden{% endif %}">
        <combo-box
          initial-focus-selector="[aria-selected='true']"
          id="{{ swatch_id }}-combo-box"
          class="combo-box"
        >
          <span class="combo-box__overlay"></span>

          <header class="combo-box__header">
            <p class="combo-box__title heading h6">{{ swatch_title }}</p>

            <button
              type="button"
              class="combo-box__close-button tap-area"
              data-action="close"
              title="{{ 'general.accessibility.close' | t | escape }}"
            >
              {%- render 'icon' with 'close' -%}
            </button>
          </header>

          <div class="combo-box__option-list" role="listbox">
            {% if current_product_text %}
              {% for related_product in current_product_products %}
                {% liquid
                  for related_product_option in related_product.options_with_values
                    assign related_product_option_name_downcase = related_product_option.name | downcase | strip
                    if use_options_name == related_product_option_name_downcase and related_product_option.values.size == 1
                      assign related_product_option_match = related_product_option
                      break
                    endif
                  endfor
                  if related_product_option_match
                    assign related_product_label = related_product_option_match.values[0].name
                  else
                    assign related_product_label = related_product.metafields[swatch_namespace].text
                  endif
                %}
                <a
                  href="{{ related_product.url }}"
                  title="{{ related_product.metafields[swatch_namespace].text }}"
                  data-handle="{{ related_product.handle }}"
                  class="combo-box__option-item {% unless related_product.available %}is-disabled{% endunless %}"
                  aria-selected="{% if related_product == current_product %}true{% else %}false{% endif %}"
                >
                  {{ related_product_label }}
                </a>
              {% endfor %}
            {% elsif current_product_color != blank
              or current_product_image != blank
              or current_product_base64_image != blank
            %}
              {% for related_product in current_product_products %}
                {% liquid
                  assign related_product_option_match = null
                  for related_product_option in related_product.options_with_values
                    assign related_product_option_name_downcase = related_product_option.name | downcase | strip
                    if use_options_name == related_product_option_name_downcase and related_product_option.values.size == 1
                      assign related_product_option_match = related_product_option
                      break
                    endif
                  endfor
                  if related_product_option_match
                    assign related_product_label = related_product_option_match.values[0].name
                    assign related_product_label_downcase = related_product_label | downcase
                    assign related_product_color = null
                    assign related_product_image = null
                    if related_product_option_match.values[0].swatch
                      assign related_product_color = related_product_option_match.values[0].swatch.color
                      assign related_product_image = related_product_option_match.values[0].swatch.image
                    else
                      assign fallback_to_color_metaobjects = true
                      for color_swatch_item in color_swatch_config
                        assign color_swatch_parts = color_swatch_item | split: ':'
                        assign color_swatch_name = color_swatch_parts.first | downcase | strip

                        if related_product_label_downcase == color_swatch_name
                          assign color_swatch_value = color_swatch_parts.last | strip

                          if color_swatch_value contains '#'
                            assign related_product_color = color_swatch_value
                          elsif images[color_swatch_value] != blank
                            assign related_product_image = images[color_swatch_value]
                          endif
                          assign fallback_to_color_metaobjects = false

                          break
                        endif
                      endfor
                      comment
                        If we find nothing then fallback to color metaobjects (either native or custom)
                      endcomment
                      if fallback_to_color_metaobjects
                        assign color_metaobject_type = settings.color_metaobject_type | strip | default: 'shopify--color-pattern'
                        assign metaobject_color_values = shop.metaobjects[color_metaobject_type].values
                        paginate metaobject_color_values by 250
                          for color_obj in metaobject_color_values
                            assign color_name_downcase = color_obj.label | downcase

                            if related_product_label_downcase == color_name_downcase
                              assign related_product_label = color_obj.label
                              assign related_product_image = color_obj.image
                              assign related_product_base64_image = color_obj.base64_image
                              assign related_product_color = color_obj.color

                              break
                            endif
                          endfor
                        endpaginate
                      endif
                    endif
                  elsif related_product.metafields[swatch_namespace].metaobject.value
                    assign related_product_label = related_product.metafields[swatch_namespace].metaobject.value.label
                    assign related_product_color = related_product.metafields[swatch_namespace].metaobject.value.color
                    assign related_product_image = related_product.metafields[swatch_namespace].metaobject.value.image
                    assign related_product_base64_image = related_product.metafields[swatch_namespace].metaobject.value.base64_image
                  else
                    assign related_product_label = related_product.metafields[swatch_namespace].label
                    assign related_product_color = related_product.metafields[swatch_namespace].color
                    assign related_product_image = related_product.metafields[swatch_namespace].image
                    assign related_product_base64_image = related_product.metafields[swatch_namespace].base64_image
                  endif
                %}
                {%- capture swatch_item_style -%}
                  {%- if related_product_image -%}
                    {% case related_product_image.type %}
                      {% when 'image' or 'file_reference' or null %}
                        background-image:url({{ related_product_image | img_url: '72x72' }});
                      {% when 'url' %}
                        background-image:url({{ related_product_image }});
                    {% endcase %}
                  {%- elsif related_product_base64_image != blank -%}
                    background-image: url('data:image/png;base64,{{ related_product_base64_image }}');
                  {%- else -%}
                    background-color: {{ related_product_color }};
                  {%- endif -%}
                {%- endcapture -%}

                <a
                  href="{{ related_product.url }}"
                  title="{{ related_product_label }}"
                  data-handle="{{ related_product.handle }}"
                  class="combo-box__option-item combo-box__option-item--color-swatch {% unless related_product.available %}is-disabled{% endunless %}"
                  aria-selected="{% if related_product == current_product %}true{% else %}false{% endif %}"
                >
                  <div
                    class="color-swatch {% render 'color-swatch-white', value: related_product_label %} {% if related_product == current_product %}is-active{% endif %} {% unless related_product.available %}is-disabled{% endunless %}"
                    data-handle="{{ related_product.handle }}"
                  >
                    <span
                      class="color-swatch__item"
                      {% if swatch_item_style != blank %}
                        style="{{ swatch_item_style }}"
                      {% endif %}
                    ></span>
                  </div>
                  {{ related_product_label }}
                </a>
              {% endfor %}
            {% endif %}

            {%- for value in option.values -%}
              <button
                type="button"
                role="option"
                class="combo-box__option-item"
                value="{{ value | escape }}"
                aria-selected="{% if value == option.selected_value %}true{% else %}false{% endif %}"
              >
                {{ value }}
              </button>
            {%- endfor -%}
          </div>
        </combo-box>

        <button
          type="button"
          {% if current_product_products.count > 1 %}
            is="toggle-button"
          {% else %}
            disabled
          {% endif %}
          class="select"
          aria-expanded="false"
          aria-haspopup="listbox"
          aria-controls="{{ swatch_id }}-combo-box"
        >
          <span class="select__selected-value {% render 'color-swatch-white', value: current_product_label %} {% unless current_product.available %}is-disabled{% endunless %}">
            {% if current_product_color != blank
              or current_product_image != blank
              or current_product_base64_image != blank
            %}
              {%- capture swatch_item_style -%}
                {%- if current_product_image -%}
                  {% case current_product_image.type %}
                    {% when 'image' or 'file_reference' or null %}
                      background-image:url({{ current_product_image | img_url: '72x72' }});
                    {% when 'url' %}
                      background-image:url({{ current_product_image }});
                  {% endcase %}
                {%- elsif current_product_base64_image != blank -%}
                  background-image: url('data:image/png;base64,{{ current_product_base64_image }}');
                {%- else -%}
                  background-color: {{ current_product_color }};
                {%- endif -%}
              {%- endcapture -%}
              <span
                class="color-swatch__item color-swatch__item--small"
                {% if swatch_item_style != blank %}
                  style="{{ swatch_item_style }}"
                {% endif %}
              ></span>
            {% endif %}
            {% if show_label_inside_dropdown and hide_label_dropdown != true %}
              <span class="select__option-name">{{ swatch_title }}</span>
            {% endif %}
            <span id="{{ swatch_namespace }}-value" class="select__selected-value-value">
              {{- current_product_label | default: current_product_text -}}
            </span>
          </span>
          {% if current_product_products.count > 1 %}
            {%- render 'icon' with 'chevron' -%}
          {% endif %}
        </button>
      </div>
    </oz-app-swatches>
  {% elsif show_swatch %}
    <oz-app-swatches
      {% if keep_opt_vals_btwn_swatches and product_options_names %}
        data-options-names="{{ product_options_names }}"
      {% endif %}
      data-location="{{ location }}"
      data-section-id="{{ section.id }}"
      class="product-form__variants product-form__variants--oz-swatches{% if extra_class != blank %} {{ extra_class }}{% endif %}"
      {{ html_attributes }}
    >
      {% if swatches_placeholder != blank %}
        {{ swatches_placeholder }}
      {% endif %}
      <div
        class="product-form__option-selector{% if swatches_placeholder != blank %} hidden{% endif %}"
        data-selector-type="color"
      >
        {% unless location == 'list' %}
          <div class="product-form__option-info">
            <span class="product-form__option-name">{{ swatch_title }}</span>
            {% assign current_value = current_product_label | default: current_product_text | capitalize %}
            {%- if current_value != blank and show_current_color -%}
              <span class="product-form__option-value">{{ current_value }}</span>
            {%- endif %}
          </div>
        {% endunless %}
        {% if current_product_text %}
          <div
            class="block-swatch-list {% if location == 'list' %} product-item-meta__swatch-list block-swatch-list--mini{% endif %}"
          >
            {% for related_product in current_product_products %}
              {% if settings.oz_swatches_product_detail_hide_outofstock
                and location != 'list'
                and related_product.available != true
              %}
                {% continue %}
              {% endif %}
              {% liquid
                for related_product_option in related_product.options_with_values
                  assign related_product_option_name_downcase = related_product_option.name | downcase | strip
                  if use_options_name == related_product_option_name_downcase and related_product_option.values.size == 1
                    assign related_product_option_match = related_product_option
                    break
                  endif
                endfor
                if related_product_option_match
                  assign related_product_label = related_product_option_match.values[0].name
                else
                  assign related_product_label = related_product.metafields[swatch_namespace].text
                endif
              %}
              <div
                class="block-swatch {% if related_product == current_product %}is-active{% endif %} {% unless related_product.available %}is-disabled{% endunless %}"
                data-handle="{{ related_product.handle }}"
              >
                <a
                  href="{{ related_product.url }}"
                  title="{{ related_product_label }}"
                  class="block-swatch__item"
                >
                  {{ related_product_label }}
                </a>
              </div>
            {% endfor %}
          </div>
        {% elsif current_product_color != blank
          or current_product_image != blank
          or current_product_base64_image != blank
        %}
          <div
            class="color-swatch-list{% if location == 'list' %} product-item-meta__swatch-list color-swatch-list--mini{% endif %}"
          >
            {% assign list_limit_reached = false %}
            {% for related_product in current_product_products %}
              {% if list_limit != blank and location == 'list' and forloop.index > list_limit %}
                {% assign list_limit_reached = true %}
              {% endif %}
              {% if settings.oz_swatches_product_detail_hide_outofstock
                and location != 'list'
                and related_product.available != true
                and related_product != current_product
              %}
                {% continue %}
              {% endif %}
              {% if settings.oz_swatches_product_item_hide_outofstock
                and location == 'list'
                and related_product.available != true
              %}
                {% continue %}
              {% endif %}

              {% liquid
                assign related_product_option_match = null
                for related_product_option in related_product.options_with_values
                  assign related_product_option_name_downcase = related_product_option.name | downcase | strip
                  if use_options_name == related_product_option_name_downcase and related_product_option.values.size == 1
                    assign related_product_option_match = related_product_option
                    break
                  endif
                endfor
                if related_product_option_match
                  assign related_product_label = related_product_option_match.values[0].name
                  assign related_product_label_downcase = related_product_label | downcase
                  assign related_product_color = null
                  assign related_product_image = null
                  if related_product_option_match.values[0].swatch
                    assign related_product_color = related_product_option_match.values[0].swatch.color
                    assign related_product_image = related_product_option_match.values[0].swatch.image
                  else
                    assign fallback_to_color_metaobjects = true
                    for color_swatch_item in color_swatch_config
                      assign color_swatch_parts = color_swatch_item | split: ':'
                      assign color_swatch_name = color_swatch_parts.first | downcase | strip

                      if related_product_label_downcase == color_swatch_name
                        assign color_swatch_value = color_swatch_parts.last | strip

                        if color_swatch_value contains '#'
                          assign related_product_color = color_swatch_value
                        elsif images[color_swatch_value] != blank
                          assign related_product_image = images[color_swatch_value]
                        endif
                        assign fallback_to_color_metaobjects = false

                        break
                      endif
                    endfor
                    comment
                      If we find nothing then fallback to color metaobjects (either native or custom)
                    endcomment
                    if fallback_to_color_metaobjects
                      assign color_metaobject_type = settings.color_metaobject_type | strip | default: 'shopify--color-pattern'
                      assign metaobject_color_values = shop.metaobjects[color_metaobject_type].values
                      paginate metaobject_color_values by 250
                        for color_obj in metaobject_color_values
                          assign color_name_downcase = color_obj.label | downcase

                          if related_product_label_downcase == color_name_downcase
                            assign related_product_label = color_obj.label
                            assign related_product_image = color_obj.image
                            assign related_product_base64_image = color_obj.base64_image
                            assign related_product_color = color_obj.color

                            break
                          endif
                        endfor
                      endpaginate
                    endif
                  endif
                elsif related_product.metafields[swatch_namespace].metaobject.value
                  assign related_product_label = related_product.metafields[swatch_namespace].metaobject.value.label
                  assign related_product_color = related_product.metafields[swatch_namespace].metaobject.value.color
                  assign related_product_image = related_product.metafields[swatch_namespace].metaobject.value.image
                  assign related_product_base64_image = related_product.metafields[swatch_namespace].metaobject.value.base64_image
                else
                  assign related_product_label = related_product.metafields[swatch_namespace].label
                  assign related_product_color = related_product.metafields[swatch_namespace].color
                  assign related_product_image = related_product.metafields[swatch_namespace].image
                  assign related_product_base64_image = related_product.metafields[swatch_namespace].base64_image
                endif
              %}

              {%- capture swatch_item_style -%}
                {%- if related_product_image -%}
                  {% case related_product_image.type %}
                    {% when 'image' or 'file_reference' or null %}
                      background-image:url({{ related_product_image | img_url: '72x72' }});
                    {% when 'url' %}
                      background-image:url({{ related_product_image }});
                  {% endcase %}
                {%- elsif related_product_base64_image != blank -%}
                  background-image: url('data:image/png;base64,{{ related_product_base64_image }}');
                {%- elsif related_product_color != blank -%}
                  background-color: {{ related_product_color }};
                {%- endif -%}
              {%- endcapture -%}

              <div
                class="color-swatch {% render 'color-swatch-white', value: related_product_label, color: related_product_color %} {% if related_product == current_product %}is-active{% endif %} {% unless related_product.available %}is-disabled{% endunless %}{% if list_limit_reached %} hidden{% endif %}"
                data-handle="{{ related_product.handle }}"
              >
                <a
                  href="{{ related_product.url }}"
                  class="color-swatch__item"
                  {% if related_product_label != blank %}
                    {% unless show_tooltip and location != 'list' %}
                      title="{{ related_product_label }}"
                    {% endunless %}
                  {% endif %}

                  {% if swatch_item_style != blank %}
                    style="{{ swatch_item_style }}"
                  {% endif %}
                >
                  {% if related_product_label != blank and show_tooltip and location != 'list' %}
                    <span class="color-swatch__tooltip">{{ related_product_label }}</span>
                  {% endif %}
                </a>
              </div>
            {% endfor %}
            {% if list_limit != blank and location == 'list' and current_product_products.count > list_limit %}
              {% assign more_items_count = current_product_products.count | minus: list_limit %}
              <a href="{{ current_product.url }}" class="color-swatch__see-more text--xsmall link">
                {{- 'collection.general.swatches_see_more' | t: count: more_items_count -}}
              </a>
            {% endif %}
          </div>
        {% endif %}
      </div>
    </oz-app-swatches>
  {% endif %}
{% endfor %}
